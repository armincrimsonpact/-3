// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User profile model (Supabase Auth handles authentication)
model UserProfile {
  id            String    @id @default(uuid())
  authId        String    @unique // References Supabase auth.users.id
  email         String    @unique
  name          String?
  role          UserRole
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  artist        Artist?
  client        Client?
  studio        Studio?
  admin         Admin?
  
  @@index([email])
  @@index([authId])
}

enum UserRole {
  ARTIST
  CLIENT
  STUDIO
  ADMIN
}

// Removed OAuth accounts and Session models as Supabase handles these

// Artist profile
model Artist {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio             String?
  specialties     String[]
  experience      Int?
  hourlyRate      Float?
  portfolioImages String[]
  studioId        String?
  studio          Studio?  @relation(fields: [studioId], references: [id])
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  appointments    Appointment[]
  availability    Availability[]
  reviews         Review[]
  
  @@index([userId])
  @@index([studioId])
}

// Client profile
model Client {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone     String?
  birthDate DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  appointments Appointment[]
  reviews      Review[]
  favorites    Favorite[]
  
  @@index([userId])
}

// Studio profile
model Studio {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  address     String
  city        String
  state       String
  zipCode     String
  phone       String
  website     String?
  images      String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  artists Artist[]
  
  @@index([userId])
  @@index([city])
}

// Admin profile
model Admin {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
}

// Appointment model
model Appointment {
  id               String            @id @default(uuid())
  clientId         String
  client           Client            @relation(fields: [clientId], references: [id])
  artistId         String
  artist           Artist            @relation(fields: [artistId], references: [id])
  date             DateTime
  duration         Int               // in minutes
  status           AppointmentStatus @default(PENDING)
  tattooStyle      String?
  description      String?
  referenceImages  String[]
  estimatedPrice   Float?
  deposit          Float?
  depositPaid      Boolean           @default(false)
  notes            String?
  cancellationReason String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relations
  messages Message[]
  
  @@index([clientId])
  @@index([artistId])
  @@index([date])
  @@index([status])
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

// Artist availability
model Availability {
  id        String   @id @default(uuid())
  artistId  String
  artist    Artist   @relation(fields: [artistId], references: [id])
  dayOfWeek Int      // 0-6 (Sunday-Saturday)
  startTime String   // HH:MM format
  endTime   String   // HH:MM format
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([artistId])
  @@unique([artistId, dayOfWeek])
}

// Review model
model Review {
  id        String   @id @default(uuid())
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id])
  artistId  String
  artist    Artist   @relation(fields: [artistId], references: [id])
  rating    Int      // 1-5
  comment   String?
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([clientId])
  @@index([artistId])
  @@unique([clientId, artistId])
}

// Favorite artists
model Favorite {
  id        String   @id @default(uuid())
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id])
  artistId  String
  createdAt DateTime @default(now())
  
  @@index([clientId])
  @@index([artistId])
  @@unique([clientId, artistId])
}

// Messages between clients and artists
model Message {
  id            String      @id @default(uuid())
  appointmentId String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  senderId      String
  content       String
  isRead        Boolean     @default(false)
  createdAt     DateTime    @default(now())
  
  @@index([appointmentId])
  @@index([senderId])
}

// Email verification tokens
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Password reset tokens (Supabase handles these, but keeping for custom flows)
model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime
  
  @@index([email])
}

// CSRF tokens
model CsrfToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   // Changed from sessionId to userId for Supabase
  expires   DateTime
  createdAt DateTime @default(now())
  
  @@index([userId])
}
